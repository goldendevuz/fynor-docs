{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fynor","text":"<p>Fynor is a Python Web Framework built for learning purposes. The plan is to learn how frameworks are built by implementing their features, writing blog posts about them and keeping the codebase as simple as possible.</p> <p>It is a WSGI framework and can be used with any WSGI application server such as Gunicorn.</p>"},{"location":"#inspiration","title":"Inspiration","text":"<p>I was inspired to make a web framework after reading Jakhongir Rakhmonov's blog post about how he built a web framework and became an open source maintainer.</p>"},{"location":"exceptions/","title":"Custom Exception Handler","text":"<pre><code>def on_exception(req, resp, exception):\n    ...\napp.add_exception_handler(on_exception)\n</code></pre>"},{"location":"features/","title":"Features","text":"<ul> <li>WSGI compatible</li> <li>Parameterized and basic routing</li> <li>Class based handlers</li> <li>Test Client</li> <li>Support for templates</li> <li>Support for static files</li> <li>Custom exception handler</li> <li>Middleware</li> </ul> <p>Note: It is extremely raw and will hopefully keep improving.</p>"},{"location":"handlers/","title":"Handlers","text":""},{"location":"handlers/#function-based","title":"Function-based","text":"<pre><code>@app.route(\"/\", allowed_methods=[\"get\"])\ndef home(req, resp):\n    resp.text = \"Hello, this is a home page.\"\n</code></pre>"},{"location":"handlers/#class-based","title":"Class-based","text":"<pre><code>@app.route(\"/{name:l}\")\nclass GreetingHandler:\n    def get(self, req, resp, name):\n        resp.text = f\"Hello, {name}\"\n</code></pre>"},{"location":"middleware/","title":"Middleware","text":"<pre><code>from fynor.middleware import Middleware\n\nclass SimpleCustomMiddleware(Middleware):\n    def process_request(self, req):\n        print(\"Before dispatch\", req.url)\n\n    def process_response(self, req, res):\n        print(\"After dispatch\", req.url)\n\napp.add_middleware(SimpleCustomMiddleware)\n</code></pre>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#install","title":"Install","text":"<pre><code>pip install fynor\n</code></pre>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":"<pre><code>from fynor import Fynor\n\napp = Fynor()\n\n@app.route(\"/\")\ndef home(req, resp):\n    resp.text = \"Hello, this is a home page.\"\n\n@app.route(\"/about\")\ndef about_page(req, resp):\n    resp.text = \"Hello, this is an about page.\"\n</code></pre>"},{"location":"static/","title":"Static Files","text":"<p>Default folder for static files is <code>static</code>.</p> <pre><code>&lt;link href=\"static/main.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n</code></pre>"},{"location":"templates/","title":"Templates","text":"<p>Default folder for templates is <code>templates</code>.</p> <pre><code>@app.route(\"/show/template\")\ndef handler_with_template(req, resp):\n    resp.html = app.template(\"example.html\", context={\"title\": \"Awesome Framework\", \"body\": \"welcome!\"})\n</code></pre>"}]}